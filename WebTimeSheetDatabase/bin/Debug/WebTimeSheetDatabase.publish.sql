/*
Deployment script for WebTimeSheetDatabase

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WebTimeSheetDatabase"
:setvar DefaultFilePrefix "WebTimeSheetDatabase"
:setvar DefaultDataPath "c:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "c:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[AssignedRoles]...';


GO
CREATE TABLE [dbo].[AssignedRoles] (
    [AssignedRolesID] INT         IDENTITY (1, 1) NOT NULL,
    [AssignToAdmin]   INT         NULL,
    [Status]          VARCHAR (1) NULL,
    [CreatedOn]       DATETIME    NULL,
    [CreatedBy]       INT         NULL,
    [RegistrationID]  INT         NULL,
    CONSTRAINT [PK_AssignedRoles] PRIMARY KEY CLUSTERED ([AssignedRolesID] ASC)
);


GO
PRINT N'Creating [dbo].[AuditTB]...';


GO
CREATE TABLE [dbo].[AuditTB] (
    [AuditID]        INT           IDENTITY (1, 1) NOT NULL,
    [UserID]         VARCHAR (50)  NULL,
    [SessionID]      VARCHAR (50)  NULL,
    [IPAddress]      VARCHAR (50)  NULL,
    [PageAccessed]   VARCHAR (200) NULL,
    [LoggedInAt]     DATETIME      NULL,
    [LoggedOutAt]    DATETIME      NULL,
    [LoginStatus]    VARCHAR (200) NULL,
    [ControllerName] VARCHAR (200) NULL,
    [ActionName]     VARCHAR (200) NULL,
    [UrlReferrer]    VARCHAR (200) NULL,
    CONSTRAINT [PK_AuditTB] PRIMARY KEY CLUSTERED ([AuditID] ASC)
);


GO
PRINT N'Creating [dbo].[Department]...';


GO
CREATE TABLE [dbo].[Department] (
    [DeptId]         INT           IDENTITY (1, 1) NOT NULL,
    [DepartmentName] VARCHAR (100) NULL,
    [DepartmentCode] VARCHAR (10)  NULL,
    CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED ([DeptId] ASC)
);


GO
PRINT N'Creating [dbo].[DescriptionTB]...';


GO
CREATE TABLE [dbo].[DescriptionTB] (
    [DescriptionID]     INT           IDENTITY (1, 1) NOT NULL,
    [Description]       VARCHAR (100) NULL,
    [ProjectID]         INT           NULL,
    [TimeSheetMasterID] INT           NULL,
    [CreatedOn]         DATETIME      NULL,
    [UserID]            INT           NULL,
    CONSTRAINT [PK_DescriptionTB] PRIMARY KEY CLUSTERED ([DescriptionID] ASC)
);


GO
PRINT N'Creating [dbo].[Documents]...';


GO
CREATE TABLE [dbo].[Documents] (
    [DocumentID]    INT             IDENTITY (1, 1) NOT NULL,
    [DocumentName]  VARCHAR (50)    NULL,
    [DocumentBytes] VARBINARY (MAX) NULL,
    [UserID]        INT             NULL,
    [CreatedOn]     DATETIME        NULL,
    [ExpenseID]     INT             NULL,
    [DocumentType]  VARCHAR (10)    NULL,
    CONSTRAINT [PK_Documents] PRIMARY KEY CLUSTERED ([DocumentID] ASC)
);


GO
PRINT N'Creating [dbo].[ELMAH_Error]...';


GO
CREATE TABLE [dbo].[ELMAH_Error] (
    [ErrorId]     UNIQUEIDENTIFIER NOT NULL,
    [Application] NVARCHAR (60)    NOT NULL,
    [Host]        NVARCHAR (50)    NOT NULL,
    [Type]        NVARCHAR (100)   NOT NULL,
    [Source]      NVARCHAR (60)    NOT NULL,
    [Message]     NVARCHAR (500)   NOT NULL,
    [User]        NVARCHAR (50)    NOT NULL,
    [StatusCode]  INT              NOT NULL,
    [TimeUtc]     DATETIME         NOT NULL,
    [Sequence]    INT              IDENTITY (1, 1) NOT NULL,
    [AllXml]      NTEXT            NOT NULL,
    CONSTRAINT [PK_ELMAH_Error] PRIMARY KEY NONCLUSTERED ([ErrorId] ASC)
);


GO
PRINT N'Creating [dbo].[Expense]...';


GO
CREATE TABLE [dbo].[Expense] (
    [ExpenseID]       INT           IDENTITY (1, 1) NOT NULL,
    [PurposeorReason] VARCHAR (50)  NULL,
    [ExpenseStatus]   INT           NULL,
    [FromDate]        DATE          NULL,
    [ToDate]          DATE          NULL,
    [VoucherID]       VARCHAR (50)  NULL,
    [HotelBills]      INT           NULL,
    [TravelBills]     INT           NULL,
    [MealsBills]      INT           NULL,
    [LandLineBills]   INT           NULL,
    [TransportBills]  INT           NULL,
    [MobileBills]     INT           NULL,
    [Miscellaneous]   INT           NULL,
    [TotalAmount]     INT           NULL,
    [UserID]          INT           NULL,
    [CreatedOn]       DATETIME      NULL,
    [Comment]         VARCHAR (100) NULL,
    [ProjectID]       INT           NULL,
    CONSTRAINT [PK_Expense] PRIMARY KEY CLUSTERED ([ExpenseID] ASC)
);


GO
PRINT N'Creating [dbo].[ExpenseAuditTB]...';


GO
CREATE TABLE [dbo].[ExpenseAuditTB] (
    [ApprovaExpenselLogID] INT           IDENTITY (1, 1) NOT NULL,
    [ApprovalUser]         INT           NULL,
    [ProcessedDate]        DATETIME      NULL,
    [CreatedOn]            DATETIME      NULL,
    [Comment]              VARCHAR (100) NULL,
    [Status]               INT           NULL,
    [ExpenseID]            INT           NULL,
    [UserID]               INT           NULL,
    CONSTRAINT [PK_ExpenseAuditTB] PRIMARY KEY CLUSTERED ([ApprovaExpenselLogID] ASC)
);


GO
PRINT N'Creating [dbo].[Jobs]...';


GO
CREATE TABLE [dbo].[Jobs] (
    [JobId]    INT           IDENTITY (1, 1) NOT NULL,
    [JobTitle] VARCHAR (200) NULL,
    [JobCode]  VARCHAR (50)  NULL,
    CONSTRAINT [PK_Jobs] PRIMARY KEY CLUSTERED ([JobId] ASC)
);


GO
PRINT N'Creating [dbo].[Locations]...';


GO
CREATE TABLE [dbo].[Locations] (
    [LocationId]     INT            IDENTITY (1, 1) NOT NULL,
    [AddressLine1]   VARCHAR (1000) NULL,
    [AddressLine2]   VARCHAR (1000) NULL,
    [City]           VARCHAR (250)  NULL,
    [StateId]        INT            NULL,
    [CountryId]      INT            NULL,
    [ZipCode]        VARCHAR (12)   NULL,
    [RegistrationID] INT            NULL,
    [AddressType]    VARCHAR (50)   NULL,
    CONSTRAINT [PK_Locations] PRIMARY KEY CLUSTERED ([LocationId] ASC)
);


GO
PRINT N'Creating [dbo].[NotificationsTB]...';


GO
CREATE TABLE [dbo].[NotificationsTB] (
    [NotificationsID] INT          IDENTITY (1, 1) NOT NULL,
    [Status]          VARCHAR (50) NULL,
    [Message]         VARCHAR (50) NULL,
    [CreatedOn]       DATETIME     NULL,
    [FromDate]        DATETIME     NULL,
    [ToDate]          DATETIME     NULL,
    CONSTRAINT [PK_NotificationsTB] PRIMARY KEY CLUSTERED ([NotificationsID] ASC)
);


GO
PRINT N'Creating [dbo].[ProjectMaster]...';


GO
CREATE TABLE [dbo].[ProjectMaster] (
    [ProjectID]        INT           IDENTITY (1, 1) NOT NULL,
    [ProjectName]      VARCHAR (100) NULL,
    [NatureofIndustry] VARCHAR (100) NULL,
    [ProjectCode]      VARCHAR (10)  NULL,
    CONSTRAINT [PK_ProjectMaster] PRIMARY KEY CLUSTERED ([ProjectID] ASC)
);


GO
PRINT N'Creating [dbo].[Registration]...';


GO
CREATE TABLE [dbo].[Registration] (
    [RegistrationID]         INT           IDENTITY (1, 1) NOT NULL,
    [FirstName]              VARCHAR (100) NULL,
    [Mobileno]               VARCHAR (20)  NULL,
    [EmailID]                VARCHAR (100) NULL,
    [Username]               VARCHAR (20)  NULL,
    [Password]               VARCHAR (100) NULL,
    [ConfirmPassword]        VARCHAR (100) NULL,
    [Gender]                 VARCHAR (10)  NULL,
    [Birthdate]              DATETIME      NULL,
    [RoleID]                 INT           NULL,
    [CreatedOn]              DATETIME      NULL,
    [EmployeeID]             VARCHAR (10)  NULL,
    [DateofJoining]          DATE          NULL,
    [ForceChangePassword]    INT           NULL,
    [DateofLeaving]          DATE          NULL,
    [IsActive]               BIT           NULL,
    [UpdatedDate]            DATETIME      NULL,
    [LastName]               VARCHAR (100) NULL,
    [MiddleName]             VARCHAR (100) NULL,
    [WorkEmail]              VARCHAR (100) NULL,
    [DeptId]                 INT           NULL,
    [EmergencyContact]       VARCHAR (100) NULL,
    [EmergencyContactNumber] VARCHAR (15)  NULL,
    [ManagerId]              INT           NULL,
    [JobId]                  INT           NULL,
    CONSTRAINT [PK_Registration] PRIMARY KEY CLUSTERED ([RegistrationID] ASC)
);


GO
PRINT N'Creating [dbo].[Roles]...';


GO
CREATE TABLE [dbo].[Roles] (
    [RoleID]   INT           IDENTITY (1, 1) NOT NULL,
    [Rolename] VARCHAR (100) NOT NULL,
    [IsActive] BIT           NULL,
    [RoleCode] VARCHAR (30)  NULL,
    CONSTRAINT [PK_Roles] PRIMARY KEY CLUSTERED ([RoleID] ASC)
);


GO
PRINT N'Creating [dbo].[Task]...';


GO
CREATE TABLE [dbo].[Task] (
    [TaskID]         INT           IDENTITY (1, 1) NOT NULL,
    [Taskname]       VARCHAR (MAX) NULL,
    [AssignedtoID]   INT           NULL,
    [CreatedByID]    INT           NULL,
    [Startdate]      DATETIME      NULL,
    [Enddate]        DATETIME      NULL,
    [CompletedDate]  DATETIME      NULL,
    [EstimatedHours] DATETIME      NULL,
    [Actualhours]    DATETIME      NULL,
    [IsCompleted]    BIT           NULL,
    [Percentage]     INT           NULL,
    [ProjectID]      INT           NULL,
    [ParentID]       INT           NULL,
    [Comments]       VARCHAR (MAX) NULL,
    [TaskGroupID]    INT           NULL,
    [Priority]       VARCHAR (100) NULL,
    [RowStatus]      BIT           NULL,
    [IsActive]       BIT           NULL,
    [CreatedOn]      DATETIME      NULL,
    [CreatedBY]      VARCHAR (100) NULL,
    [UpdatedOn]      DATETIME      NULL,
    [UpdatedBy]      VARCHAR (100) NULL,
    PRIMARY KEY CLUSTERED ([TaskID] ASC)
);


GO
PRINT N'Creating [dbo].[TimeSheetAuditTB]...';


GO
CREATE TABLE [dbo].[TimeSheetAuditTB] (
    [ApprovalTimeSheetLogID] INT           IDENTITY (1, 1) NOT NULL,
    [ApprovalUser]           INT           NULL,
    [ProcessedDate]          DATETIME      NULL,
    [CreatedOn]              DATETIME      NULL,
    [Comment]                VARCHAR (100) NULL,
    [Status]                 INT           NULL,
    [TimeSheetMasterID]      INT           NULL,
    [UserID]                 INT           NULL,
    CONSTRAINT [PK_TimeSheetAuditTB] PRIMARY KEY CLUSTERED ([ApprovalTimeSheetLogID] ASC)
);


GO
PRINT N'Creating [dbo].[TimeSheetDetails]...';


GO
CREATE TABLE [dbo].[TimeSheetDetails] (
    [TimeSheetID]       INT            IDENTITY (1, 1) NOT NULL,
    [DaysofWeek]        VARCHAR (50)   NULL,
    [Hours]             INT            NULL,
    [Period]            DATE           NULL,
    [ProjectID]         INT            NULL,
    [UserID]            INT            NULL,
    [CreatedOn]         DATETIME       NULL,
    [TimeSheetMasterID] INT            NULL,
    [TotalHours]        INT            NULL,
    [Comments]          NVARCHAR (MAX) NULL,
    [TimesheetStatus]   INT            NULL,
    CONSTRAINT [PK_TimeSheetDetails] PRIMARY KEY CLUSTERED ([TimeSheetID] ASC)
);


GO
PRINT N'Creating [dbo].[TimeSheetMaster]...';


GO
CREATE TABLE [dbo].[TimeSheetMaster] (
    [TimeSheetMasterID] INT           IDENTITY (1, 1) NOT NULL,
    [FromDate]          DATE          NULL,
    [ToDate]            DATE          NULL,
    [TotalHours]        INT           NULL,
    [UserID]            INT           NULL,
    [CreatedOn]         DATETIME      NULL,
    [Comment]           VARCHAR (100) NULL,
    [TimeSheetStatus]   INT           NULL,
    CONSTRAINT [PK_TimeSheetMaster] PRIMARY KEY CLUSTERED ([TimeSheetMasterID] ASC)
);


GO
PRINT N'Creating [dbo].[DF_ELMAH_Error_ErrorId]...';


GO
ALTER TABLE [dbo].[ELMAH_Error]
    ADD CONSTRAINT [DF_ELMAH_Error_ErrorId] DEFAULT (newid()) FOR [ErrorId];


GO
PRINT N'Creating [dbo].[FK_ParentId_Task]...';


GO
ALTER TABLE [dbo].[Task]
    ADD CONSTRAINT [FK_ParentId_Task] FOREIGN KEY ([ParentID]) REFERENCES [dbo].[Task] ([TaskID]);


GO
PRINT N'Creating [dbo].[ELMAH_GetErrorsXml]...';


GO

CREATE PROCEDURE [dbo].[ELMAH_GetErrorsXml] (
	@Application NVARCHAR(60)
	,@PageIndex INT = 0
	,@PageSize INT = 15
	,@TotalCount INT OUTPUT
	)
AS
SET NOCOUNT ON

DECLARE @FirstTimeUTC DATETIME
DECLARE @FirstSequence INT
DECLARE @StartRow INT
DECLARE @StartRowIndex INT

SELECT @TotalCount = COUNT(1)
FROM [ELMAH_Error]
WHERE [Application] = @Application

-- Get the ID of the first error for the requested page
SET @StartRowIndex = @PageIndex * @PageSize + 1

IF @StartRowIndex <= @TotalCount
BEGIN
	SET ROWCOUNT @StartRowIndex

	SELECT @FirstTimeUTC = [TimeUtc]
		,@FirstSequence = [Sequence]
	FROM [ELMAH_Error]
	WHERE [Application] = @Application
	ORDER BY [TimeUtc] DESC
		,[Sequence] DESC
END
ELSE
BEGIN
	SET @PageSize = 0
END

-- Now set the row count to the requested page size and get
-- all records below it for the pertaining application.
SET ROWCOUNT @PageSize

SELECT errorId = [ErrorId]
	,application = [Application]
	,host = [Host]
	,type = [Type]
	,source = [Source]
	,message = [Message]
	,[user] = [User]
	,statusCode = [StatusCode]
	,TIME = CONVERT(VARCHAR(50), [TimeUtc], 126) + 'Z'
FROM [ELMAH_Error] error
WHERE [Application] = @Application
	AND [TimeUtc] <= @FirstTimeUTC
	AND [Sequence] <= @FirstSequence
ORDER BY [TimeUtc] DESC
	,[Sequence] DESC
FOR XML AUTO
GO
PRINT N'Creating [dbo].[ELMAH_GetErrorXml]...';


GO

CREATE PROCEDURE [dbo].[ELMAH_GetErrorXml] (
	@Application NVARCHAR(60)
	,@ErrorId UNIQUEIDENTIFIER
	)
AS
SET NOCOUNT ON

SELECT [AllXml]
FROM [ELMAH_Error]
WHERE [ErrorId] = @ErrorId
	AND [Application] = @Application
GO
PRINT N'Creating [dbo].[ELMAH_LogError]...';


GO

CREATE PROCEDURE [dbo].[ELMAH_LogError] (
	@ErrorId UNIQUEIDENTIFIER
	,@Application NVARCHAR(60)
	,@Host NVARCHAR(30)
	,@Type NVARCHAR(100)
	,@Source NVARCHAR(60)
	,@Message NVARCHAR(500)
	,@User NVARCHAR(50)
	,@AllXml NTEXT
	,@StatusCode INT
	,@TimeUtc DATETIME
	)
AS
SET NOCOUNT ON

INSERT INTO [ELMAH_Error] (
	[ErrorId]
	,[Application]
	,[Host]
	,[Type]
	,[Source]
	,[Message]
	,[User]
	,[AllXml]
	,[StatusCode]
	,[TimeUtc]
	)
VALUES (
	@ErrorId
	,@Application
	,@Host
	,@Type
	,@Source
	,@Message
	,@User
	,@AllXml
	,@StatusCode
	,@TimeUtc
	)
GO
PRINT N'Creating [dbo].[GetDescriptionbyTimeSheetMasterID]...';


GO

CREATE PROC [dbo].[GetDescriptionbyTimeSheetMasterID] @TimeSheetMasterID INT
	,@ProjectID INT
AS
BEGIN
	SELECT Description
	FROM DescriptionTB
	WHERE TimeSheetMasterID = @TimeSheetMasterID
		AND ProjectID = @ProjectID
END
GO
PRINT N'Creating [dbo].[Usp_ChangeTimesheetStatus]...';


GO

CREATE PROC [dbo].[Usp_ChangeTimesheetStatus] @Status INT
	,@TimeSheetMasterID INT
	,@Comment VARCHAR(100)
AS
BEGIN
	UPDATE dbo.TimeSheetAuditTB
	SET STATUS = @Status
		,Comment = @Comment
		,ProcessedDate = getdate()
	WHERE TimeSheetMasterID = @TimeSheetMasterID

	UPDATE dbo.TimeSheetMaster
	SET TimeSheetStatus = @Status
	WHERE TimeSheetMasterID = @TimeSheetMasterID

	UPDATE dbo.TimeSheetDetails
	SET TimeSheetStatus = @Status
	WHERE TimeSheetMasterID = @TimeSheetMasterID
END
GO
PRINT N'Creating [dbo].[Usp_DeleteExpenseandDocuments]...';


GO

CREATE PROC [dbo].[Usp_DeleteExpenseandDocuments] @ExpenseID INT
	,@UserID INT
AS
BEGIN
	DELETE
	FROM Expense
	WHERE ExpenseID = @ExpenseID
		AND UserID = @UserID

	IF EXISTS (
			SELECT DocumentID
			FROM dbo.Documents
			WHERE ExpenseID = @ExpenseID
				AND UserID = @UserID
			)
	BEGIN
		DELETE
		FROM Documents
		WHERE ExpenseID = @ExpenseID
			AND UserID = @UserID
	END

	IF EXISTS (
			SELECT ApprovaExpenselLogID
			FROM dbo.ExpenseAuditTB
			WHERE ExpenseID = @ExpenseID
				AND UserID = @UserID
			)
	BEGIN
		DELETE
		FROM ExpenseAuditTB
		WHERE ExpenseID = @ExpenseID
			AND UserID = @UserID
	END
END
GO
PRINT N'Creating [dbo].[Usp_GetHoursbyTimeSheetMasterID]...';


GO
CREATE proc [dbo].[Usp_GetHoursbyTimeSheetMasterID]    
@TimeSheetMasterID int   ,
@ProjectID int 
as    
begin    
    
SELECT  TimeSheetID, comments, TimesheetStatus ,
      Hours 
  FROM [TimeSheetDetails]     
  where TimeSheetMasterID =@TimeSheetMasterID and ProjectID =@ProjectID
  
  union all
  
  SELECT   NULL,  null,null,
      SUM(Hours) 
  FROM [TimeSheetDetails]     
  where TimeSheetMasterID =@TimeSheetMasterID and ProjectID =@ProjectID 
end



/****** Object:  StoredProcedure [dbo].[Usp_ChangeTimesheetStatus]    Script Date: 9/25/2018 2:35:27 PM ******/
SET ANSI_NULLS ON
GO
PRINT N'Creating [dbo].[Usp_GetTimeSheetbyFromDateandToDateTimeSheet]...';


GO

CREATE PROC [dbo].[Usp_GetTimeSheetbyFromDateandToDateTimeSheet] @FromDate DATE = NULL
	,@ToDate DATE = NULL
AS
BEGIN
	SELECT [TimeSheetMasterID]
	FROM [WebTimeSheetDB].[dbo].[TimeSheetMaster]
	WHERE FromDate BETWEEN @FromDate
			AND @ToDate
END
GO
PRINT N'Creating [dbo].[Usp_GetTimeSheetMasterIDTimeSheet]...';


GO

CREATE PROC [dbo].[Usp_GetTimeSheetMasterIDTimeSheet] @FromDate DATE = NULL
	,@ToDate DATE = NULL
	,@UserID INT
AS
BEGIN
	SELECT [TimeSheetMasterID]
	FROM [WebTimeSheetDB].[dbo].[TimeSheetMaster]
	WHERE FromDate BETWEEN @FromDate
			AND @ToDate
		AND UserID = @UserID
END
GO
PRINT N'Creating [dbo].[Usp_GetWeekTimeSheetDetails]...';


GO

CREATE PROC [dbo].[Usp_GetWeekTimeSheetDetails] @TimeSheetMasterID INT
AS
BEGIN
	SELECT TM.DaysofWeek
		,TM.Hours
		,TM.Period
		,PM.ProjectName
		,TM.CreatedOn
	FROM TimeSheetDetails TM
	INNER JOIN ProjectMaster PM ON TM.ProjectID = PM.ProjectID
	WHERE TimeSheetMasterID = @TimeSheetMasterID
END
GO
PRINT N'Creating [dbo].[Usp_GetWeekTimeSheetDetailsByDateRange]...';


GO

CREATE PROC [dbo].[Usp_GetWeekTimeSheetDetailsByDateRange] @FromDate DATE = NULL
	,@ToDate DATE = NULL
	,@UserID INT
AS
BEGIN
	DECLARE @TimeSheetMasterID INT

	SELECT @TimeSheetMasterID = [TimeSheetMasterID]
	FROM [WebTimeSheetDB].[dbo].[TimeSheetMaster]
	WHERE FromDate >= @FromDate
		AND ToDate <= @ToDate
		AND UserID = @UserID

	SELECT TM.DaysofWeek
		,TM.Hours
		,TM.Period
		,PM.ProjectName
		,PM.ProjectCode
		,PM.ProjectID
		,TM.TimeSheetStatus
		,TimeSheetMasterID
		,TimeSheetID
	FROM TimeSheetDetails TM
	INNER JOIN ProjectMaster PM ON TM.ProjectID = PM.ProjectID
	WHERE TimeSheetMasterID = @TimeSheetMasterID
END
GO
PRINT N'Creating [dbo].[Usp_UpdateUserRole]...';


GO

CREATE PROC [dbo].[Usp_UpdateUserRole] @RegistrationID INT
AS
BEGIN
	DELETE
	FROM AssignedRoles
	WHERE RegistrationID = @RegistrationID
END
GO
PRINT N'Creating [dbo].[AssignedRoles].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = N'It is Registration Table  RegistrationID', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'AssignedRoles';


GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
